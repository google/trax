# Copyright 2022 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Not really an RL config, but it's here because it depends on serialization
# logic which is currently in trax.rl.

import trax.data.tf_inputs
import trax.models
import trax.optimizers
import trax.supervised.trainer_lib

# Module trax.data.inputs:
# ==============================================================================
sine_inputs.batch_size = 64
sine_inputs.length = 100
sine_inputs.min_period = 0.1
sine_inputs.max_period = 10

# Module trax.models.transformer:
# ==============================================================================
TransformerLM.d_model = 128
TransformerLM.d_ff = 256
TransformerLM.dropout = 0.1
TransformerLM.max_len = 2048
TransformerLM.mode = 'train'
TransformerLM.n_heads = 2
TransformerLM.n_layers = 2

# Module trax.rl.serialization_utils:
# ==============================================================================
TimeSeriesModel.seq_model = @trax.models.TransformerLM
TimeSeriesModel.low = -1.0
TimeSeriesModel.high = 1.0
TimeSeriesModel.precision = 2
TimeSeriesModel.vocab_size = 16
TimeSeriesModel.significance_decay = 0.7

# Module trax.supervised.lr_schedules:
# ==============================================================================
multifactor.constant = 0.1
multifactor.factors = 'constant * linear_warmup * rsqrt_decay'
multifactor.warmup_steps = 1000

# Module trax.supervised.trainer_lib:
# ==============================================================================
train.inputs = @trax.data.sine_inputs
train.eval_frequency = 1000
train.eval_steps = 10
train.model = @trax.rl.TimeSeriesModel
train.optimizer = @trax.optimizers.Adam
train.steps = 10000
train.callbacks = (
    @trax.supervised.callbacks.SerializedModelEvaluation,
)

# Module trax.supervised.callbacks:
# ==============================================================================
SerializedModelEvaluation.eval_at = 500
SerializedModelEvaluation.context_lengths = (0, 1, 10)
SerializedModelEvaluation.horizon_lengths = (1, 3, 10)
