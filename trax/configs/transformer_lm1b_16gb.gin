# Copyright 2019 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.models
import trax.optimizers
import trax.supervised.inputs
import trax.supervised.trainer_lib

# Parameters for batch_fn:
# ==============================================================================
batch_fn.batch_size_per_device = 256
batch_fn.eval_batch_size = 256
batch_fn.max_eval_length = 2048

# Parameters for inputs:
# ==============================================================================
inputs.data_dir = None
inputs.dataset_name = 't2t_languagemodel_lm1b32k'
inputs.input_name = 'targets'

# Parameters for MultifactorSchedule:
# ==============================================================================
MultifactorSchedule.constant = 1.0
MultifactorSchedule.factors = 'constant * linear_warmup * rsqrt_decay'
MultifactorSchedule.warmup_steps = 8000

# Parameters for preprocess_fun:
# ==============================================================================
shuffle_and_batch_data.preprocess_fun=@trax.supervised.inputs.lm1b_preprocess
lm1b_preprocess.max_target_length = 512
lm1b_preprocess.max_eval_target_length = 2048

# Parameters for train:
# ==============================================================================
train.eval_frequency = 500
train.eval_steps = 1
train.inputs = @trax.supervised.inputs.inputs
train.model = @trax.models.TransformerLM
train.optimizer = @trax.optimizers.Adafactor
train.train_steps = 50000
train.mask_id = 0

# Parameters for DotProductCausalAttention:
# ==============================================================================
DotProductCausalAttention.dropout = 0.1

# Parameters for TransformerLM:
# ==============================================================================
TransformerLM.attention_type = @trax.layers.DotProductCausalAttention
TransformerLM.d_model = 512
TransformerLM.d_ff = 2048
TransformerLM.dropout = 0.1
TransformerLM.max_len = 2048
TransformerLM.mode = 'train'
TransformerLM.n_heads = 8
TransformerLM.n_layers = 6
TransformerLM.vocab_size = 32000

# ==============================================================================
# Parameters for the RL hyperparameter tuner; turn on with
# train.lr_schedule=@learning_rate.PolicySchedule and set
# PolicySchedule.policy_dir.
# ==============================================================================

# Parameters for PolicySchedule:
# ==============================================================================
PolicySchedule.observation_metrics = (
    ("train", "metrics/accuracy"),
    ("train", "metrics/loss"),
    ("eval", "metrics/accuracy"),
    ("eval", "metrics/loss"),
)
PolicySchedule.include_controls_in_observation = False
PolicySchedule.control_configs = (
    ("learning_rate", 1e-3, (1e-9, 1e-2), False),
    ("weight_decay_rate", 1e-5, (1e-9, 1e-3), False),

    ("dropout_embedding", 0.1, (0.0, 0.9), True),

    ("dropout_attention_initial", 0.1, (0.0, 0.9), True),
    ("dropout_ff_middle_initial", 0.1, (0.0, 0.9), True),
    ("dropout_ff_final_initial", 0.1, (0.0, 0.9), True),

    ("dropout_attention_middle", 0.1, (0.0, 0.9), True),
    ("dropout_ff_middle_middle", 0.1, (0.0, 0.9), True),
    ("dropout_ff_final_middle", 0.1, (0.0, 0.9), True),

    ("dropout_attention_final", 0.1, (0.0, 0.9), True),
    ("dropout_ff_middle_final", 0.1, (0.0, 0.9), True),
    ("dropout_ff_final_final", 0.1, (0.0, 0.9), True),
)
PolicySchedule.observation_range = (0.0, 10.0)
PolicySchedule.action_multipliers = (0.5, 0.8, 0.95, 1.0, 1.05, 1.25, 2.0)
PolicySchedule.policy_and_value_model = @trax.models.TransformerDecoder
PolicySchedule.policy_and_value_two_towers = False

# Parameters for train:
# ==============================================================================
train.nontrainable_param_map = {
    # "dropout_{layer_type}_{block_index}": "dropout_{layer_type}_{block_group}"

    "dropout_attention_0": "dropout_attention_initial",
    "dropout_ff_middle_0": "dropout_ff_middle_initial",
    "dropout_ff_final_0": "dropout_ff_final_initial",

    "dropout_attention_1": "dropout_attention_middle",
    "dropout_ff_middle_1": "dropout_ff_middle_middle",
    "dropout_ff_final_1": "dropout_ff_final_middle",
    "dropout_attention_2": "dropout_attention_middle",
    "dropout_ff_middle_2": "dropout_ff_middle_middle",
    "dropout_ff_final_2": "dropout_ff_final_middle",
    "dropout_attention_3": "dropout_attention_middle",
    "dropout_ff_middle_3": "dropout_ff_middle_middle",
    "dropout_ff_final_3": "dropout_ff_final_middle",
    "dropout_attention_4": "dropout_attention_middle",
    "dropout_ff_middle_4": "dropout_ff_middle_middle",
    "dropout_ff_final_4": "dropout_ff_final_middle",

    "dropout_attention_5": "dropout_attention_final",
    "dropout_ff_middle_5": "dropout_ff_middle_final",
    "dropout_ff_final_5": "dropout_ff_final_final",
}

# Parameters for TransformerDecoder:
# ==============================================================================
TransformerDecoder.d_model = 64
TransformerDecoder.d_ff = 128
TransformerDecoder.dropout = 0.0
TransformerDecoder.n_heads = 2
TransformerDecoder.n_layers = 2
