# Copyright 2020 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.data
import trax.models.research.bert

include 'bert.gin'

# Download AQuA-RAT dataset https://github.com/deepmind/AQuA and change data_dir to path containing dataset
data_dir = 'path-to-directory-with-aqua-dataset'

# Parameters for TFDS data pipeline:
# ==============================================================================
make_inputs.train_stream = [
  @train/data.LoadJSONRows(),
  @data.AQuAExtendedQuestion(),
  @data.NROP(),
  @data.Tokenize(),
  @data.CreateBertInputs(),
  @data.Shuffle(),
  @data.PadToLength(),
  @data.TruncateToLength(),
  @data.mask_random_tokens,
  @data.Batch()
]
make_inputs.eval_stream = [
  @eval/data.LoadJSONRows(),
  @data.AQuAExtendedQuestion(),
  @data.NROP(),
  @data.Tokenize(),
  @data.CreateBertInputs(),
  @data.Shuffle(),
  @data.PadToLength(),
  @data.TruncateToLength(),
  @data.mask_random_tokens,
  @data.Batch()
]

train/data.LoadJSONRows.dir_path = %data_dir
train/data.LoadJSONRows.fname = 'train.json'
eval/data.LoadJSONRows.dir_path = %data_dir
eval/data.LoadJSONRows.fname = 'dev.json'


sentences_length = 512
data.PadToLength.len_map = {0: %sentences_length, 1: %sentences_length, 2: %sentences_length}
data.PadToLength.pad_value = {0: 0, 1: 0, 2:0}
data.TruncateToLength.len_map = {0: (%sentences_length,), 1: (%sentences_length,), 2: (%sentences_length,)}

data.Batch.batch_size = 32
# Parameters for train:
# ==============================================================================
train.loss_fn = @bert.BERTPretrainingLoss()
train.metrics = {'loss': @bert.BERTPretrainingLoss(),
                 'rop accuracy': @bert.BERTPretrainingClsAcc(),
                 'mlm accuracy': @bert.BERTPretrainingMLMAcc()
                }

# Parameters for BERT:
# ==============================================================================
BERT.head = @bert.BERTPretrainingHead
bert.BERTPretrainingHead.n_classes = 2
