# Copyright 2022 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import t5.data.preprocessors
import trax.data
import trax.layers
import trax.models
import trax.optimizers
import trax.supervised.lr_schedules
import trax.supervised.trainer_lib
import trax.layers.metrics

# Parameters for TFDS data pipeline:
# ==============================================================================
data.Tokenize.vocab_file = 'bert_uncased_vocab.txt'
data.Tokenize.vocab_type = 'bert-lowercase'
# If during the execution time of the binary the directory trax/data/testdata
# containing the vocab file is not accessible, then copy the file to a drive
# and change the path accordingly.
data.Tokenize.vocab_dir = 'trax/data/testdata/'
data.Tokenize.keys = [0, 1]
data.PadToLength.len_map = {0: 512, 1: 512, 2: 512}
data.PadToLength.pad_value = {0: 0, 1: 0, 2:0}
data.TruncateToLength.len_map = {0: (512,), 1: (512,), 2: (512,)}
data.Batch.batch_size = 16

# Parameters for train:
# ==============================================================================
train.optimizer = @trax.optimizers.Adam
train.eval_frequency = 20
train.eval_steps = 10
train.inputs = @data.make_inputs
train.model = @trax.models.BERT
train.steps = 200000
train.checkpoint_highest = 'accuracy'

# Parameters for BERT:
# ==============================================================================
BERT.init_checkpoint = 'bert-base-uncased'

# Parameters for multifactor:
# ==============================================================================
multifactor.constant = 3e-5
multifactor.factors = 'constant * linear_warmup'
multifactor.warmup_steps = 1000
