# Copyright 2022 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.data
import trax.layers
import trax.models
import trax.optimizers
import trax.supervised.lr_schedules
import trax.supervised.trainer_lib
import trax.models.research.bert
import trax.layers.metrics

include 'c4.gin'

# This config illustrates how to manage two eval tasks.

# Corresponds roughly to T5 'large' ~ 770m params, i.e. T5's `bi_v1_large.gin`.
d_model = 1024
d_ff = 4096
n_heads = 16
n_layers = 24
attn_kv = 64
dropout = 0.1
vocab_size = 32000

ff_chunk_size = 0
ff_sparsity = 0
loss_sparsity = 0

enc_attn_type = @Attention

MultiplicativeModularCausalAttention.sparsity = 16
MultiplicativeConvCausalAttention.sparsity = 16
MultiplicativeConvCausalAttention.length_kernel_size = 3

dec_attn_type = @CausalAttention

# Parameters for training and eval data:
# ==============================================================================
#
# See https://www.tensorflow.org/datasets/catalog/glue for a description
# of the MNLI dataset.
make_inputs.train_stream = @data.T5GlueTrainStream()
make_inputs.eval_stream = @data.T5GlueEvalStream()
data.T5GlueTrainStream.benchmark = 'mnli'
data.T5GlueEvalStream.benchmark = 'mnli'
data.T5GlueEvalTasks.benchmark_list = ['mnli_e2']

data.PadToLength.len_map = {0: 512, 1: 512, 2: 512}
data.PadToLength.pad_value = {0: 0, 1: 0, 2:0}
data.TruncateToLength.len_map = {0: (256,), 1: (256,), 2: (256,)}
data.Batch.batch_size = 4

# Parameters for train:
# ==============================================================================
train.init_checkpoint = None
train.optimizer = @trax.optimizers.Adafactor
train.eval_frequency = 20
train.eval_steps = 10
train.inputs = @trax.data.make_inputs
train.model = @trax.models.ConfigurableTransformer
train.steps = 200000
train.checkpoint_highest = 'accuracy'
train.additional_eval_tasks = @data.T5GlueEvalTasks()

# Parameters for ConfigurableTransformer:
# ==============================================================================
ConfigurableTransformer.d_model = %d_model
ConfigurableTransformer.d_ff = %d_ff
ConfigurableTransformer.dropout = %dropout
ConfigurableTransformer.ff_dropout = %dropout
ConfigurableTransformer.ff_chunk_size = %ff_chunk_size
ConfigurableTransformer.ff_sparsity = %ff_sparsity
ConfigurableTransformer.max_len = %max_length
ConfigurableTransformer.mode = 'train'
ConfigurableTransformer.n_heads = %n_heads
ConfigurableTransformer.n_encoder_layers = %n_layers
ConfigurableTransformer.n_decoder_layers = %n_layers
ConfigurableTransformer.input_vocab_size = %vocab_size
ConfigurableTransformer.encoder_attention_type = %enc_attn_type
ConfigurableTransformer.encoder_decoder_attention_type = %dec_attn_type
ConfigurableTransformer.loss_sparsity = %loss_sparsity

# Parameters for Transformer:
# ==============================================================================
Transformer.d_ff = %d_ff
Transformer.d_model = %d_model
Transformer.dropout = 0.1
Transformer.dropout_shared_axes = None
Transformer.input_vocab_size = 32000
Transformer.max_len = 2048
Transformer.n_decoder_layers = %n_layers
Transformer.n_encoder_layers = %n_layers
Transformer.n_heads = %n_heads
Transformer.output_vocab_size = None

# Parameters for Adafactor:
# ==============================================================================
Adafactor.weight_decay_rate = 1e-5
Adafactor.weight_decay_n_steps = 100000
Adafactor.beta1 = 0.0
Adafactor.decay_rate = 0.8
Adafactor.clipping_threshold = 1.0
Adafactor.epsilon1 = 1e-16
Adafactor.epsilon2 = 0.001
Adafactor.factored = True
Adafactor.multiply_by_parameter_scale = True

# Parameters for multifactor:
# ==============================================================================
multifactor.constant = 1e-3
# multifactor.factors = 'constant'
Adam.weight_decay_rate = 0.0   # default is 1e-05
multifactor.factors = 'constant * linear_warmup'
multifactor.warmup_steps = 1000  # default is 400
